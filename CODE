#include <16F877A.h>
#include <stdio.h>
#fuses HS,NOWDT,NOPROTECT,NOLVP,NOBROWNOUT
#use delay(clock=8000000)
#use i2c(master, sda=PIN_C4, scl=PIN_C3, force_sw)
#use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, parity=N, bits=8, stop=1)
#use pwm(CCP1, frequency=1000)

// Ð?a ch? I2C c?a LCD
#define LCD_I2C_ADDR 0x27

// Các chân c?m bi?n và thi?t b?
#define MQ3_DIGITAL PIN_B0
#define MQ3_ANALOG PIN_A1
#define PULSE_SENSOR PIN_A0
#define LED1 PIN_D0
#define BUZZER PIN_D4
#define TRIG PIN_B5  // Ð?i thành RB5
#define ECHO PIN_B4  // Ð?i thành RB4
#define IN1 PIN_C0
#define IN2 PIN_C1
#define LED_PULSE PIN_C5

// Các l?nh LCD
#define LCD_CLEAR 0x01
#define LCD_HOME 0x02
#define LCD_ENTRY_MODE 0x06
#define LCD_DISPLAY_ON 0x0C
#define LCD_FUNCTION_SET 0x28
#define BACKLIGHT_ON 0x08
#define BACKLIGHT_OFF 0x00

// H? s? hi?u ch?nh kho?ng cách
#define CALIBRATION_FACTOR 5.0
 
// Bi?n toàn c?c
float khoangcach = 0;
unsigned int16 soxung;
int last_buzzer_state = -1;
int8 current_duty = 90;
int1 motor_running = 0;
unsigned long range_20_100_counter = 0;
int range_20_100_triggered = 0;

// Bi?n toàn c?c cho các chu?i ký t? d? gi?m s? d?ng RAM d?ng
char error_str[8] = {'D', ':', 'E', 'r', 'r', 'o', 'r', '\0'};
char outrange_str[11] = {'D', ':', 'O', 'u', 't', 'R', 'a', 'n', 'g', 'e', '\0'};
char d_label[3] = {'D', ':', '\0'};
char m_co[5] = {'M', ':', 'C', 'O', '\0'};
char m_ko[5] = {'M', ':', 'K', 'O', '\0'};
char p_label[3] = {'P', ':', '\0'};
char test_lcd[9] = {'T', 'e', 's', 't', ' ', 'L', 'C', 'D', '\0'};
char working[9] = {'W', 'o', 'r', 'k', 'i', 'n', 'g', '!', '\0'};
char init_msg[6] = {'S', 't', 'a', 'r', 't', '\0'};
char instruction_msg[36] = {'F', ':', 't', 'h', 'u', 'a', 'n', ' ',
                            'R', ':', 'n', 'g', 'u', 'o', 'c', ' ',
                            'S', ':', 'd', 'u', 'n', 'g', ' ',
                            'L', ':', 't', 'h', 'a', 'p', ' ',
                            'H', ':', 'c', 'a', 'o', '\0'};
char err_msg[4] = {'E', 'r', 'r', '\0'};
char msg_fwd[4] = {'F', 'w', 'd', '\0'};
char msg_rev[4] = {'R', 'e', 'v', '\0'};
char msg_stop[5] = {'S', 't', 'o', 'p', '\0'};
char msg_low[6] = {'L', 'o', 'w', '2', '0', '\0'};
char msg_high[7] = {'H', 'i', 'g', 'h', '9', '0', '\0'};

// Hàm giao ti?p I2C v?i LCD
void lcd_i2c_write_byte(unsigned char data, unsigned char backlight) {
    i2c_start();
    if (i2c_write(LCD_I2C_ADDR << 1) == -1) {
        printf("I2C Error: No device at address 0x%X\r\n", LCD_I2C_ADDR);
        i2c_stop();
        return;
    }
    if (i2c_write(data | backlight) == -1) {
        printf("I2C Error: Failed to write data\r\n");
        i2c_stop();
        return;
    }
    i2c_stop();
    delay_us(500);
}

// Hàm g?i l?nh d?n LCD
void lcd_send_cmd(unsigned char cmd) {
    unsigned char data;
    data = (cmd & 0xF0) | 0x04; lcd_i2c_write_byte(data, BACKLIGHT_ON); delay_us(500);
    data = (cmd & 0xF0); lcd_i2c_write_byte(data, BACKLIGHT_ON);
    data = ((cmd << 4) & 0xF0) | 0x04; lcd_i2c_write_byte(data, BACKLIGHT_ON); delay_us(500);
    data = ((cmd << 4) & 0xF0); lcd_i2c_write_byte(data, BACKLIGHT_ON);
    delay_ms(2);
}

// Hàm g?i d? li?u d?n LCD
void lcd_send_data(unsigned char data) {
    unsigned char temp;
    temp = (data & 0xF0) | 0x05; lcd_i2c_write_byte(temp, BACKLIGHT_ON); delay_us(500);
    temp = (data & 0xF0) | 0x01; lcd_i2c_write_byte(temp, BACKLIGHT_ON);
    temp = ((data << 4) & 0xF0) | 0x05; lcd_i2c_write_byte(temp, BACKLIGHT_ON); delay_us(500);
    temp = ((data << 4) & 0xF0) | 0x01; lcd_i2c_write_byte(temp, BACKLIGHT_ON);
    delay_us(500);
}

// Hàm kh?i t?o LCD
void lcd_init() {
    delay_ms(50);
    printf("Starting LCD Initialization...\r\n");

    printf("Step 1: Force 4-bit mode...\r\n");
    lcd_i2c_write_byte(0x00, BACKLIGHT_ON); delay_ms(20);
    lcd_i2c_write_byte(0x30 | 0x04, BACKLIGHT_ON); delay_ms(5);
    lcd_i2c_write_byte(0x30, BACKLIGHT_ON); delay_ms(5);
    lcd_i2c_write_byte(0x30 | 0x04, BACKLIGHT_ON); delay_ms(5);
    lcd_i2c_write_byte(0x30, BACKLIGHT_ON); delay_ms(5);
    lcd_i2c_write_byte(0x20 | 0x04, BACKLIGHT_ON); delay_ms(5);
    lcd_i2c_write_byte(0x20, BACKLIGHT_ON); delay_ms(5);
    printf("Step 1 completed.\r\n");

    printf("Step 2: Send FUNCTION_SET...\r\n");
    lcd_send_cmd(LCD_FUNCTION_SET);
    delay_ms(5);
    printf("Step 2 completed.\r\n");

    printf("Step 3: Send DISPLAY_ON...\r\n");
    lcd_send_cmd(LCD_DISPLAY_ON);
    delay_ms(5);
    printf("Step 3 completed.\r\n");

    printf("Step 4: Send CLEAR...\r\n");
    lcd_send_cmd(LCD_CLEAR);
    delay_ms(5);
    printf("Step 4 completed.\r\n");

    printf("Step 5: Send ENTRY_MODE...\r\n");
    lcd_send_cmd(LCD_ENTRY_MODE);
    delay_ms(5);
    printf("Step 5 completed.\r\n");

    printf("LCD Initialized Successfully\r\n");
}

void lcd_set_cursor(unsigned char col, unsigned char row) {
    unsigned char addr = (row == 0) ? 0x80 : 0xC0;
    addr += col;
    lcd_send_cmd(addr);
}

void lcd_print(char str[]) {
    int i = 0;
    while (str[i] != '\0') {
        lcd_send_data(str[i]);
        i++;
        delay_ms(2);
    }
}

void lcd_clear_line(unsigned char row) {
    lcd_set_cursor(0, row);
    char clear_str[17];
    for (int i = 0; i < 16; i++) clear_str[i] = ' ';
    clear_str[16] = '\0';
    lcd_print(clear_str);
    lcd_set_cursor(0, row);
}

void int_to_string(int16 num, char *str) {
    if (num == 0) { str[0] = '0'; str[1] = '\0'; return; }
    char digits[6];
    int8 i = 0;
    int16 temp = num;
    while (temp > 0) { digits[i] = (temp % 10) + '0'; temp /= 10; i++; }
    int8 j;
    for (j = 0; j < i; j++) { str[j] = digits[i - 1 - j]; }
    str[j] = '\0';
}

// Hàm hi?n th? kho?ng cách
void display_distance(float value, unsigned char x, unsigned char y) {
    char str[6];
    lcd_clear_line(y);
    lcd_set_cursor(x, y);
    if (value == -1 || value > 100) {
        lcd_print(outrange_str);
    } else if (value < 2) {
        lcd_print(error_str);
    } else {
        int whole = (int)value;
        int decimal = (int)((value - whole) * 10);
        int_to_string(whole, str);
        int len = 0;
        while (str[len] != '\0') len++;
        str[len] = '.'; str[len + 1] = '0' + decimal; str[len + 2] = '\0';
        lcd_print(d_label); lcd_print(str);
    }
}

// Hàm hi?n th? MQ3 và Pulse Sensor
void display_mq3_pulse(int mq3_state, int16 pulse_value, unsigned char x, unsigned char y) {
    char str[6];
    lcd_clear_line(y);
    lcd_set_cursor(x, y);
    if (mq3_state == 0) {
        lcd_print(m_co);
    } else {
        lcd_print(m_ko);
    }
    int_to_string(pulse_value, str);
    lcd_set_cursor(x + 8, y);
    lcd_print(p_label);
    lcd_print(str);
}

// Hàm c?m bi?n siêu âm
void tao_xung_trig() {
    output_low(TRIG); delay_us(2);
    output_high(TRIG); delay_us(10);
    output_low(TRIG);
}

void thoigian_echo() {
    set_timer1(0);
    while (!input(ECHO) && get_timer1() < 30000); // Ð?i ECHO lên cao
    if (get_timer1() >= 30000) {
        soxung = 0;
        printf("Echo timeout: No signal received\r\n");
        return;
    }
    set_timer1(0);
    while (input(ECHO) && get_timer1() < 30000); // Ð?i ECHO xu?ng th?p
    soxung = get_timer1();
    if (soxung >= 30000) {
        soxung = 0;
        printf("Echo timeout: Signal too long\r\n");
    }
}

float measure_distance() {
    int retries = 20;
    float distance = -1;
    for (int i = 0; i < retries; i++) {
        // Ð?i chân ECHO xu?ng th?p tru?c khi g?i xung trigger
        set_timer1(0);
        while (input(ECHO) && get_timer1() < 30000); // Ð?i t?i da 30ms
        if (get_timer1() >= 30000) {
            printf("ECHO high too long, possible noise\r\n");
            delay_ms(50); // Tang th?i gian ch? n?u ECHO không xu?ng th?p
            continue;
        }

        tao_xung_trig();
        thoigian_echo();
        if (soxung != 0) {
            distance = (soxung * 0.5 * 0.0343) / 2 * CALIBRATION_FACTOR;
            break;
        }
        delay_ms(50);
    }
    return distance;
}

// L?c giá tr? analog c?a MQ3
int16 read_mq3_analog() {
    set_adc_channel(1);
    delay_us(20);
    int16 sum = 0;
    for (int i = 0; i < 5; i++) {
        sum += read_adc();
        delay_us(100);
    }
    return sum / 5;
}

// L?c giá tr? analog c?a Pulse Sensor
int16 read_pulse_analog() {
    set_adc_channel(0);
    delay_us(20);
    int16 sum = 0;
    int count = 0;
    for (int i = 0; i < 5; i++) {
        int16 value = read_adc();
        if (value > 0 && value < 1023) {
            sum += value;
            count++;
        }
        delay_us(100);
    }
    if (count == 0) return 0;
    return sum / count;
}

void blink_led_buzzer(int times, int blink_led, int blink_buzzer) {
    for (int i = 0; i < times; i++) {
        if (blink_led) output_high(LED1);
        if (blink_buzzer) output_high(BUZZER);
        delay_ms(100);
        if (blink_led) output_low(LED1);
        if (blink_buzzer) output_low(BUZZER);
        delay_ms(100);
    }
}

// Hàm g?i thông di?p qua UART
void send_uart_message(char *msg) {
    while (*msg) {
        putc(*msg++);
    }
    putc('\r');
    putc('\n');
}

// Hàm xóa b? d?m UART
void clear_uart_buffer() {
    while (kbhit()) {
        getc();
    }
    delay_ms(200);
}

// Hàm di?u khi?n d?ng co quay thu?n
void motor_forward() {
    output_high(IN1);
    output_low(IN2);
    delay_ms(10);
    int16 duty_value = (int16)current_duty * 1023 / 100;
    pwm_on();
    set_pwm1_duty(duty_value);
    motor_running = 1;
    send_uart_message(msg_fwd);
}

// Hàm di?u khi?n d?ng co quay ngu?c
void motor_reverse() {
    output_low(IN1);
    output_high(IN2);
    delay_ms(10);
    int16 duty_value = (int16)current_duty * 1023 / 100;
    pwm_on();
    set_pwm1_duty(duty_value);
    motor_running = 1;
    send_uart_message(msg_rev);
}

// Hàm d?ng d?ng co
void motor_stop() {
    output_low(IN1);
    output_low(IN2);
    delay_ms(10);
    set_pwm1_duty(0);
    motor_running = 0;
    send_uart_message(msg_stop);
}

// Hàm d?t t?c d? th?p
void set_low_speed() {
    current_duty = 20;
    int16 duty_value = (int16)current_duty * 1023 / 100;
    pwm_on();
    set_pwm1_duty(duty_value);
    send_uart_message(msg_low);
}

// Hàm d?t t?c d? cao
void set_high_speed() {
    current_duty = 100;
    int16 duty_value = (int16)current_duty * 1023 / 100;
    pwm_on();
    set_pwm1_duty(duty_value);
    send_uart_message(msg_high);
}

void main() {
    // C?u hình c?ng
    set_tris_a(0b00000011); // RA0 (PULSE_SENSOR), RA1 (MQ3_ANALOG) là ngõ vào
    set_tris_b(0b00010001); // RB0 (MQ3_DIGITAL), RB4 (ECHO) là ngõ vào; RB5 (TRIG) là ngõ ra
    set_tris_d(0b00000000); // Port D là ngõ ra (LED1, BUZZER, IN1, IN2)
    set_tris_c(0b10011000); // RC7 (RX), RC4 (SDA), RC3 (SCL) là ngõ vào; RC6 (TX), RC5 (LED_PULSE), RC2 (CCP1) là ngõ ra

    // T?t các ngo?i vi không c?n thi?t
    setup_ccp2(CCP_OFF);
    setup_spi(FALSE);

    // C?u hình ADC
    setup_adc_ports(A_ANALOG); // RA0 (AN0), RA1 (AN1) là analog
    setup_adc(ADC_CLOCK_DIV_32); // S? d?ng clock ADC phù h?p v?i 8 MHz

    // C?u hình Timer cho c?m bi?n siêu âm
    setup_timer_1(T1_INTERNAL | T1_DIV_BY_4);

    // C?u hình PWM trên CCP1
    setup_ccp1(CCP_PWM);
    setup_timer_2(T2_DIV_BY_4, 124, 1);

    // Kh?i t?o tr?ng thái ban d?u
    output_low(TRIG);
    output_low(LED1);
    output_low(BUZZER);
    output_low(IN1);
    output_low(IN2);
    output_high(LED_PULSE);

    // Ki?m tra Port D
    printf("Starting Port D test...\r\n");
    for (int i = 0; i < 3; i++) {
        output_high(LED1); output_high(BUZZER); delay_ms(200);
        output_low(LED1); output_low(BUZZER); delay_ms(200);
    }
    printf("Port D test completed.\r\n");

    // Làm nóng MQ3
    printf("Warming up MQ3 sensor...\r\n");
    delay_ms(10000);

    // Kh?i t?o LCD
    lcd_init();

    // Hi?n th? thông di?p kh?i d?ng trên LCD
    lcd_set_cursor(0, 0); lcd_print(test_lcd);
    lcd_set_cursor(0, 1); lcd_print(working);
    delay_ms(2000);
    lcd_send_cmd(LCD_CLEAR);

    printf("After LCD init\r\n");

    // G?i thông báo kh?i d?ng d?ng co
    send_uart_message(init_msg);
    send_uart_message(instruction_msg);

    motor_stop();
    delay_ms(500);
    clear_uart_buffer();

    int blink_continuous = 0;
    unsigned long loop_counter = 0;
    unsigned long update_interval = 20; // C?p nh?t m?i ~200ms
    unsigned long uart_interval = 50; // G?i UART m?i ~500ms

    while (TRUE) {
        // X? lý l?nh t? UART
        if (kbhit()) {
            char command = getc();
            if (command >= 'A' && command <= 'Z') {
                switch (command) {
                    case 'F':
                        motor_forward();
                        break;
                    case 'R':
                        motor_reverse();
                        break;
                    case 'S':
                        motor_stop();
                        break;
                    case 'L':
                        set_low_speed();
                        break;
                    case 'H':
                        set_high_speed();
                        break;
                    default:
                        send_uart_message(err_msg);
                        break;
                }
            }
            clear_uart_buffer();
        }

        // Ð?c c?m bi?n
        int mq3_digital_state = input(MQ3_DIGITAL);
        delay_us(10);
        int16 mq3_analog_value = read_mq3_analog();
        int16 pulse_value = read_pulse_analog();
        khoangcach = measure_distance();

        // C?p nh?t LCD
        if (loop_counter % update_interval == 0) {
            display_mq3_pulse(mq3_digital_state, pulse_value, 0, 0);
            display_distance(khoangcach, 0, 1);
        }

        // G?i d? li?u qua UART
        if (loop_counter % uart_interval == 0) {
            char mq3_status[3];
            if (mq3_digital_state == 0) {
                mq3_status[0] = 'C'; mq3_status[1] = 'O'; mq3_status[2] = '\0';
            } else {
                mq3_status[0] = 'K'; mq3_status[1] = 'O'; mq3_status[2] = '\0';
            }
            char uart_buffer[64];
            if (khoangcach == -1 || khoangcach > 100) {
                sprintf(uart_buffer, "Dist: OutRange, MQ3: %s, Val: %ld, Pulse: %ld\r\n", mq3_status, (long)mq3_analog_value, (long)pulse_value);
                printf(uart_buffer);
            } else if (khoangcach < 2) {
                sprintf(uart_buffer, "Dist: Error, MQ3: %s, Val: %ld, Pulse: %ld\r\n", mq3_status, (long)mq3_analog_value, (long)pulse_value);
                printf(uart_buffer);
            } else {
                char khoangcach_str[6];
                int whole = (int)khoangcach;
                int decimal = (int)((khoangcach - whole) * 10);
                int_to_string(whole, khoangcach_str);
                int len = 0;
                while (khoangcach_str[len] != '\0') len++;
                khoangcach_str[len] = '.'; khoangcach_str[len + 1] = '0' + decimal; khoangcach_str[len + 2] = '\0';
                sprintf(uart_buffer, "Dist: %s cm, MQ3: %s, Val: %ld, Pulse: %ld\r\n", khoangcach_str, mq3_status, (long)mq3_analog_value, (long)pulse_value);
                printf(uart_buffer);
            }
        }

        // Ði?u khi?n LED và Buzzer (ch? khi d?ng co ch?y)
        int current_buzzer_state = 0;
        if (motor_running) {
            // Du?i 20 cm
            if (khoangcach <= 20 && khoangcach >= 2) {
                if (current_duty == 20) {
                    current_buzzer_state = 4;
                } else {
                    current_buzzer_state = 3;
                }
            }
            // 100 cm
            else if (khoangcach >= 99.5 && khoangcach <= 100.5) {
                current_buzzer_state = 1;
            }
            // 20-100 cm
            else if (khoangcach > 20 && khoangcach < 99.5) {
                current_buzzer_state = 2;
                range_20_100_counter++;
                if (range_20_100_counter >= 1000 && !range_20_100_triggered) {
                    if (current_duty == 20) {
                        blink_led_buzzer(1, 1, 1);
                    } else {
                        blink_led_buzzer(3, 1, 1);
                    }
                    range_20_100_triggered = 1;
                }
            } else {
                range_20_100_counter = 0;
                range_20_100_triggered = 0;
                current_buzzer_state = 0;
            }

            if (current_buzzer_state != last_buzzer_state) {
                if (current_buzzer_state == 1) {
                    blink_continuous = 0;
                    blink_led_buzzer(1, 1, 1);
                } else if (current_buzzer_state == 2) {
                    blink_continuous = 0;
                    blink_led_buzzer(3, 1, 1);
                } else if (current_buzzer_state == 3) {
                    blink_continuous = 1;
                } else if (current_buzzer_state == 4) {
                    blink_continuous = 0;
                } else {
                    blink_continuous = 0;
                }
                last_buzzer_state = current_buzzer_state;
            }

            if (current_buzzer_state == 4) {
                output_high(LED1);
                output_low(BUZZER);
            } else if (blink_continuous) {
                output_high(LED1); output_high(BUZZER); delay_ms(50);
                output_low(LED1); output_low(BUZZER); delay_ms(50);
            } else if (mq3_digital_state == 0) {
                output_high(LED1); output_high(BUZZER); delay_ms(200);
                output_low(LED1); output_low(BUZZER); delay_ms(200);
            } else {
                output_low(LED1); output_low(BUZZER);
            }
        } else {
            // N?u d?ng co không ch?y, t?t LED và còi
            output_low(LED1);
            output_low(BUZZER);
            range_20_100_counter = 0;
            range_20_100_triggered = 0;
            blink_continuous = 0;
            last_buzzer_state = -1;
        }

        loop_counter++;
        delay_ms(10);
    }
}
